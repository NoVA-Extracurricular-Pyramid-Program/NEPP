rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for better security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      // Allow users to read other users' basic info for group functionality
      allow read: if isAuthenticated();
      
      // User notifications subcollection - users can only access their own notifications
      match /notifications/{notificationId} {
        allow read, write, delete: if isOwner(userId);
        allow create: if isAuthenticated(); // Others can create notifications for this user
      }
    }
    
    // Groups - allow reading for authenticated users to enable membership queries
    match /groups/{groupId} {
      // Allow reading groups for authenticated users (needed for membership queries)
      allow read: if isAuthenticated();
      
      // Allow creating groups
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.createdBy &&
        request.resource.data.ownerId == request.auth.uid;
        
      // Allow updates for owners, co-owners, and admins
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.createdBy ||
        request.auth.uid == resource.data.ownerId ||
        request.auth.uid in resource.data.coOwners ||
        request.auth.uid in resource.data.admins ||
        // Allow joining only if user is adding themselves to members
        (request.auth.uid in request.resource.data.members && 
         !(request.auth.uid in resource.data.members))
      );
      
      // Allow deletion only for owners
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.createdBy ||
        request.auth.uid == resource.data.ownerId
      );
    }
    
    // Forms - enhanced security with proper access control
    match /forms/{formId} {
      // Allow reading for authenticated users - filtering will be done client-side
      // This enables the app to load forms and then filter based on group membership
      allow read: if isAuthenticated();
      
      // Allow creating forms
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.createdBy;
        
      // Allow updates only for creators
      allow update, delete: if isAuthenticated() && 
        request.auth.uid == resource.data.createdBy;
    }
    
    // Form responses - allow authenticated users to create and read their own responses
    match /form_responses/{responseId} {
      allow read: if isAuthenticated() && (
        // User can read their own responses
        request.auth.uid == resource.data.userId ||
        // Form creator can read responses to their forms
        get(/databases/$(database)/documents/forms/$(resource.data.formId)).data.createdBy == request.auth.uid
      );
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Legacy formResponses collection (keeping for backward compatibility)
    match /formResponses/{responseId} {
      allow read: if isAuthenticated() && (
        // User can read their own responses
        request.auth.uid == resource.data.userId ||
        // Form creator can read responses to their forms
        get(/databases/$(database)/documents/forms/$(resource.data.formId)).data.createdBy == request.auth.uid
      );
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Events - enhanced rules for target audience functionality
    match /events/{eventId} {
      // Allow reading for all authenticated users
      // (Client-side filtering will ensure users only see appropriate events)
      allow read: if isAuthenticated();
      
      // Allow creating events with proper data structure validation
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.createdBy &&
        request.resource.data.selectedGroups is list &&
        request.resource.data.invitedUsers is list;
      
      // Allow updates and deletions only for event creator
      allow update, delete: if isAuthenticated() && 
        request.auth.uid == resource.data.createdBy;
    }
    
    // Announcements - allow reading and liking for all authenticated users
    match /announcements/{announcementId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.createdBy;
      // Allow updates for creator or for liking functionality
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.createdBy ||
        // Allow updates for likes (users can like/unlike announcements)
        true
      );
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.createdBy;
    }
    
    // Resources - simplified permissions for file sharing
    match /resources/{resourceId} {
      // Allow reading for authenticated users - filtering will be done client-side
      // This enables the app to load shared files and then filter based on sharing settings
      allow read: if isAuthenticated();
      
      // Allow creating resources
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      
      // Allow updates only for file owner
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      
      // Allow deletion only for file owner
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
    
    // Feedback collection - users can create feedback
    match /feedback/{feedbackId} {
      // Allow users to create feedback
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      
      // Allow users to read their own feedback
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      
      // You can add your own UID here to read all feedback for admin purposes
      // allow read: if isAuthenticated() && request.auth.uid == 'YOUR_ADMIN_UID';
    }
  }
}
